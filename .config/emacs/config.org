* Preferences
#+begin_src elisp
  (setq-default
   auto-save-list-file-prefix nil      ; Prevent tracking for auto-saves
   make-backup-files          nil
   auto-save-default          nil
   create-lockfiles           nil
   help-window-select         t        ; Focus new help windows when opened
   delete-by-moving-to-trash  t        ; Delete files to Trash ($HOME/.local/share/Trash)
   sentence-end-double-space  nil      ; Use a single space after dots
   mouse-yank-at-point        t        ; Yank at point rather than pointer
   x-select-enable-clipboard  t        ; After copying in X11, paste by `yank'
   x-select-enable-primary    t        ; After mouse highlighting in X11, paste by `yank'
   indent-tabs-mode           nil
   )

  (when window-system (global-hl-line-mode 1))
  (when window-system (global-prettify-symbols-mode 1))
  (fset 'yes-or-no-p 'y-or-n-p)        ; Replace yes/no prompts with y/n

  (recentf-mode            1)
  (save-place-mode         1)          ; Remember and restore the last cursor position of opened files.
  (show-paren-mode         1)
  (line-number-mode        1)
  (column-number-mode      1)
  (blink-cursor-mode       0)
  (electric-pair-mode      1)
  (global-subword-mode     1)          ; Iterate through CamelCase words.
  (delete-selection-mode   1)          ; Replace highlighted region when inserting text.
  (global-auto-revert-mode 1)          ; Revert buffers when the underlying file has changed.

  ;; Save what you enter into minibuffer prompts.
  (setq history-length 25)
  (savehist-mode 1)

  ;; Run at full power please.
  (put 'upcase-region             'disabled nil)
  (put 'downcase-region           'disabled nil)
  (put 'narrow-to-region          'disabled nil)
  (put 'narrow-to-page            'disabled nil)
  (put 'erase-buffer              'disabled nil)
  (put 'scroll-left               'disabled nil)
  (put 'dired-find-alternate-file 'disabled nil)

  (setq-default
   scroll-conservatively 100)

  (require 'uniquify)
  (setq uniquify-buffer-name-style 'forward)

  (global-set-key (kbd "C-x C-b") 'ibuffer)
  (setq ibuffer-expert t)

  ;; Kill buffers without asking for confirmation
  (setq kill-buffer-query-functions (delq 'process-kill-buffer-query-function kill-buffer-query-functions))

  (global-set-key (kbd "M-z") 'zap-up-to-char)

  (global-set-key (kbd "C-s")   'isearch-forward-regexp)
  (global-set-key (kbd "C-r")   'isearch-backward-regexp)
  (global-set-key (kbd "C-M-s") 'isearch-forward)
  (global-set-key (kbd "C-M-r") 'isearch-backward)

  ;; Use shift + arrowkeys to navigate between windows.
  (when (fboundp 'windmove-default-keybindings)
    (windmove-default-keybindings))
#+end_src

* Theme

| [[https://github.com/doomemacs/themes][doom-themes]] |  A megapack of themes for GNU Emacs. |

** doom-themes
#+begin_src elisp
  (use-package doom-themes
    :ensure t
    :config
    ;; Global settings (defaults)
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
          doom-themes-enable-italic t) ; if nil, italics is universally disabled
    (load-theme 'doom-one t)

    ;; Enable flashing mode-line on errors
    (doom-themes-visual-bell-config)
    ;; Enable custom neotree theme (all-the-icons must be installed!)
    ;(doom-themes-neotree-config)
    ;; or for treemacs users
    ;(setq doom-themes-treemacs-theme "doom-atom") ; use "doom-colors" for less minimal icon theme
    ;(doom-themes-treemacs-config)
    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config))
#+end_src

* Appearence

| [[https://github.com/domtronn/all-the-icons.el][all-the-icons]] | A utility package to collect various Icon Fonts and propertize them within Emacs. |
| [[https://github.com/seagle0128/doom-modeline][doom-modeline]] | A fancy and fast mode-line inspired by minimalism design.                         |

** all-the-icons
#+begin_src elisp
  (use-package all-the-icons
    :ensure t
    :if (display-graphic-p))
#+end_src

** doom-modeline
#+begin_src elisp
  (use-package doom-modeline
    :ensure t
    :config (doom-modeline-mode 1))
#+end_src

* Org-mode

| [[https://orgmode.org/][org-mode]] | Your life in plain text                |

** Config
#+begin_src elisp
  ;; M-x org-customize
  (setq
   org-startup-folded         t
   org-src-window-setup       'current-window
   org-ellipsis               "_"
   ;org-adapt-indentation      t

   ;; Babel
   org-confirm-babel-evaluate nil

   ;; Org Appearence
   org-hide-leading-stars     t
   org-pretty-entities        t
   org-hide-emphasis-markers  nil

   ;; Org Link
   org-descriptive-links      t
   org-return-follows-link    t
   )

  (global-set-key (kbd "C-c o o") 'org-toggle-link-display)
  ;(add-hook 'org-mode-hook 'org-indent-mode)
  (add-hook 'org-mode-hook 'visual-line-mode)
#+end_src

* File Manager

| =dired= | built-in |

** dired
#+begin_src elisp
  (setq
   dired-recursive-copies 'always
   dired-recursive-deletes 'always
   dired-kill-when-opening-new-dired-buffer t ; emacs 28.1
   dired-listing-switches "-lAhp --group-directories-first"
   dired-dwim-target t
   )

  (add-hook 'dired-mode-hook #'dired-hide-details-mode)
#+end_src

* Navigation

| [[https://github.com/abo-abo/avy][avy]] |  Jump to things in Emacs tree-style |

** avy
#+begin_src elisp
  (use-package avy
    :ensure t)

  (global-set-key (kbd "C-:")     'avy-goto-char)
  (global-set-key (kbd "C-'")     'avy-goto-char-2)
  (global-set-key (kbd "C-c C-z") 'avy-goto-char-timer)
  (global-set-key (kbd "M-g f")   'avy-goto-line)
#+end_src

* Window & Frame Management

** Custom Functions
#+begin_src elisp
  ;; Follow window splits
  (defun split-and-follow-horizontally ()
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)

  (defun split-and-follow-vertically ()
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 3") 'split-and-follow-vertically)
#+end_src

* Buffer(s)
** Custom Functions
#+begin_src elisp
  ;; Always murder current buffer
  (defun kill-current-buffer ()
    "Kills the current buffer."
    (interactive)
    (kill-buffer (current-buffer)))
  (global-set-key (kbd "C-x k") 'kill-current-buffer)

  ;; close-all-buffers
  (defun close-all-buffers ()
    "Kill all buffers without regard for their origin."
    (interactive)
    (mapc 'kill-buffer (buffer-list)))
  (global-set-key (kbd "C-s-k") 'close-all-buffers)
#+end_src

* Editing

| [[https://github.com/magnars/multiple-cursors.el][multiple-cursors.el]] |  Multiple cursors for emacs.               |
| [[https://github.com/mrkkrp/zzz-to-char][zzz-to-char]]         | Fancy replacement for zap-to-char in Emacs |

** Multiple cursors
#+begin_src elisp
  (use-package multiple-cursors
    :ensure t)

  ;; When you have an active region that spans multiple lines, the following will
  ;; add a cursor to each line:
  (global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)

  ;; When you want to add multiple cursors not based on continuous lines, but
  ;; based on keywords in the buffer, use:
  (global-set-key (kbd "C->") 'mc/mark-next-like-this)
  (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
  (global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)
  ;; First mark the word, then add more cursors.

  ;; To get out of multiple-cursors-mode, press `<return>' or `C-g'. The latter will
  ;; first disable multiple regions before disabling multiple cursors. If you
  ;; want to insert a newline in multiple-cursors-mode, use `C-j'.
#+end_src

** Custom Functions
#+begin_src elisp
  (defun daedreth/kill-inner-word ()
    "Kills the entire word your cursor is in. Equivalent to 'ciw' in vim."
    (interactive)
    (forward-char 1)
    (backward-word)
    (kill-word 1))
  (global-set-key (kbd "C-c c w") 'daedreth/kill-inner-word)

  (defun daedreth/copy-whole-word ()
    (interactive)
    (save-excursion
      (forward-char 1)
      (backward-word)
      (kill-word 1)
      (yank)))
  (global-set-key (kbd "C-c y w") 'daedreth/copy-whole-word)

  ;; copy a line
  (defun daedreth/copy-whole-line ()
    "Copies a line without regard for cursor position."
    (interactive)
    (save-excursion
      (kill-new
       (buffer-substring
	(point-at-bol)
	(point-at-eol)))))
  (global-set-key (kbd "C-c y y") 'daedreth/copy-whole-line)

  ;; kill a line
  (global-set-key (kbd "C-c d d") 'kill-whole-line)
#+end_src

** zzz-to-char
#+begin_src elisp
  (use-package zzz-to-char
    :ensure t
    :bind
    ("M-z" . zzz-up-to-char)
    ("M-Z" . zzz-to-char))

  (setq zzz-to-char-reach 100)

  ;; (global-set-key (kbd "M-z") 'zzz-up-to-char)
  ;; (global-set-key (kbd "M-Z") 'zzz-to-char)
#+end_src

* Visualize

| [[https://github.com/Malabarba/beacon][beacon]]             | Never lose your cursor again    |
| [[https://elpa.gnu.org/packages/rainbow-mode.html][rainbow-mode]]       | Colorize color names in buffers |
| [[https://github.com/Fanael/rainbow-delimiters][rainbow-delimiters]] | Emacs rainbow delimiters mode   |

** beacon
#+begin_src elisp
  (use-package beacon
    :ensure t
    :init
    (beacon-mode 1))
#+end_src

** rainbow-mode
#+begin_src elisp
  (use-package rainbow-mode
    :ensure t
    :init
    (add-hook 'prog-mode-hook 'rainbow-mode))
#+end_src

** rainbow-delimiters
#+begin_src elisp
  (use-package rainbow-delimiters
    :ensure t
    :init
    (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
#+end_src

* Project Management
** Projectile
#+begin_src elisp
  (use-package projectile
    :ensure t
    :config
    (projectile-mode 1)
    (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map))
#+end_src

* Interface Enhancement

| [[https://github.com/Wilfred/helpful][helpful]] | A better Emacs *help* buffer. |

** Dashboard
#+begin_src elisp
  (use-package dashboard
    :ensure t
    :init
    (progn
      (setq dashboard-banner-logo-title "")
      (setq dashboard-startup-banner "~/.config/emacs/img/dashLogo.png")
      (setq dashboard-show-shortcuts nil)
      (setq dashboard-items '((recents  . 5)
                              (projects . 5)))
      (setq dashboard-set-heading-icons t)
      (setq dashboard-set-file-icons t)
      )
    :config
    (dashboard-setup-startup-hook))
#+end_src

** helpful
#+begin_src elisp
  (use-package helpful
    :ensure t)

  ;; Note that the built-in `describe-function' includes both functions
  ;; and macros. `helpful-function' is functions only, so we provide
  ;; `helpful-callable' as a drop-in replacement.
  (global-set-key (kbd "C-h f") #'helpful-callable)

  (global-set-key (kbd "C-h v") #'helpful-variable)
  (global-set-key (kbd "C-h k") #'helpful-key)

  ;; Lookup the current symbol at point. C-c C-d is a common keybinding
  ;; for this in lisp modes.
  (global-set-key (kbd "C-c C-d") #'helpful-at-point)

  ;; Look up *F*unctions (excludes macros).
  ;;
  ;; By default, C-h F is bound to `Info-goto-emacs-command-node'. Helpful
  ;; already links to the manual, if a function is referenced there.
  (global-set-key (kbd "C-h F") #'helpful-function)

  ;; Look up *C*ommands.
  ;;
  ;; By default, C-h C is bound to describe `describe-coding-system'. I
  ;; don't find this very useful, but it's frequently useful to only
  ;; look at interactive functions.
  (global-set-key (kbd "C-h C") #'helpful-command)
#+end_src

** Minibuffer

| [[https://github.com/minad/vertico][vertico]]    | vertico.el - VERTical Interactive COmpletion                      |
| [[https://github.com/oantolin/orderless][orderless]]  | Emacs completion style that matches multiple regexps in any order |
| [[https://github.com/minad/marginalia][marginalia]] | marginalia.el - Marginalia in the minibuffer                      |
| [[https://github.com/minad/consult][consult]]    | consult.el - Consulting completing-read                           |
| [[https://github.com/oantolin/embark][embark]]     | Embark: Emacs Mini-Buffer Actions Rooted in Keymaps               |

*** vertico
#+begin_src elisp
  ;; Enable vertico
  (use-package vertico
    :ensure t
    :init
    (vertico-mode)

    ;; Different scroll margin
    ;; (setq vertico-scroll-margin 0)

    ;; Show more candidates
    ;; (setq vertico-count 20)

    ;; Grow and shrink the Vertico minibuffer
    ;; (setq vertico-resize t)

    ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
    ;; (setq vertico-cycle t)
    )

  ;; Persist history over Emacs restarts. Vertico sorts by history position.
  ;(use-package savehist
  ;  :ensure t
  ;  :init
  ;  (savehist-mode))

  ;; A few more useful configurations...
  (use-package emacs
    :ensure t
    :init
    ;; Add prompt indicator to `completing-read-multiple'.
    (defun crm-indicator (args)
      (cons (concat "[CRM] " (car args)) (cdr args)))
    (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

    ;; Do not allow the cursor in the minibuffer prompt
    (setq minibuffer-prompt-properties
          '(read-only t cursor-intangible t face minibuffer-prompt))
    (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

    ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
    ;; Vertico commands are hidden in normal buffers.
    ;; (setq read-extended-command-predicate
    ;;       #'command-completion-default-include-p)

    ;; Enable recursive minibuffers
    (setq enable-recursive-minibuffers t))
#+end_src

*** orderless
#+begin_src elisp
  (use-package orderless
    :ensure t
    :init
    ;; Configure a custom style dispatcher (see the Consult wiki)
    ;; (setq orderless-style-dispatchers '(+orderless-dispatch)
    ;;       orderless-component-separator #'orderless-escapable-split-on-space)
    (setq completion-styles '(orderless basic)
          completion-category-defaults nil
          completion-category-overrides '((file (styles partial-completion)))))
#+end_src

*** marginalia
#+begin_src elisp
  (use-package marginalia
    :ensure t
    :config
    (marginalia-mode))
#+end_src

*** consult
#+begin_src elisp
  ;; Example configuration for Consult
  (use-package consult
    :ensure t
    ;; Replace bindings. Lazily loaded due by `use-package'.
    :bind (;; C-c bindings (mode-specific-map)
	   ("C-c h" . consult-history)
	   ("C-c m" . consult-mode-command)
	   ("C-c k" . consult-kmacro)
	   ;; C-x bindings (ctl-x-map)
	   ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
	   ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
	   ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
	   ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
	   ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
	   ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer
	   ;; Custom M-# bindings for fast register access
	   ("M-#" . consult-register-load)
	   ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
	   ("C-M-#" . consult-register)
	   ;; Other custom bindings
	   ("M-y" . consult-yank-pop)                ;; orig. yank-pop
	   ("<help> a" . consult-apropos)            ;; orig. apropos-command
	   ;; M-g bindings (goto-map)
	   ("M-g e" . consult-compile-error)
	   ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
	   ("M-g g" . consult-goto-line)             ;; orig. goto-line
	   ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
	   ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
	   ("M-g m" . consult-mark)
	   ("M-g k" . consult-global-mark)
	   ("M-g i" . consult-imenu)
	   ("M-g I" . consult-imenu-multi)
	   ;; M-s bindings (search-map)
	   ("M-s d" . consult-find)
	   ("M-s D" . consult-locate)
	   ("M-s g" . consult-grep)
	   ("M-s G" . consult-git-grep)
	   ("M-s r" . consult-ripgrep)
	   ("M-s l" . consult-line)
	   ("M-s L" . consult-line-multi)
	   ("M-s m" . consult-multi-occur)
	   ("M-s k" . consult-keep-lines)
	   ("M-s u" . consult-focus-lines)
	   ;; Isearch integration
	   ("M-s e" . consult-isearch-history)
	   :map isearch-mode-map
	   ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
	   ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
	   ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
	   ("M-s L" . consult-line-multi)            ;; needed by consult-line to detect isearch
	   ;; Minibuffer history
	   :map minibuffer-local-map
	   ("M-s" . consult-history)                 ;; orig. next-matching-history-element
	   ("M-r" . consult-history))                ;; orig. previous-matching-history-element

    ;; Enable automatic preview at point in the *Completions* buffer. This is
    ;; relevant when you use the default completion UI.
    :hook (completion-list-mode . consult-preview-at-point-mode)

    ;; The :init configuration is always executed (Not lazy)
    :init

    ;; Optionally configure the register formatting. This improves the register
    ;; preview for `consult-register', `consult-register-load',
    ;; `consult-register-store' and the Emacs built-ins.
    (setq register-preview-delay 0.5
	  register-preview-function #'consult-register-format)

    ;; Optionally tweak the register preview window.
    ;; This adds thin lines, sorting and hides the mode line of the window.
    (advice-add #'register-preview :override #'consult-register-window)

    ;; Optionally replace `completing-read-multiple' with an enhanced version.
    (advice-add #'completing-read-multiple :override #'consult-completing-read-multiple)

    ;; Use Consult to select xref locations with preview
    (setq xref-show-xrefs-function #'consult-xref
	  xref-show-definitions-function #'consult-xref)

    ;; Configure other variables and modes in the :config section,
    ;; after lazily loading the package.
    :config

    ;; Optionally configure preview. The default value
    ;; is 'any, such that any key triggers the preview.
    ;; (setq consult-preview-key 'any)
    ;; (setq consult-preview-key (kbd "M-."))
    ;; (setq consult-preview-key (list (kbd "<S-down>") (kbd "<S-up>")))
    ;; For some commands and buffer sources it is useful to configure the
    ;; :preview-key on a per-command basis using the `consult-customize' macro.
    (consult-customize
     consult-theme
     :preview-key '(:debounce 0.2 any)
     consult-ripgrep consult-git-grep consult-grep
     consult-bookmark consult-recent-file consult-xref
     consult--source-bookmark consult--source-recent-file
     consult--source-project-recent-file
     :preview-key (kbd "M-."))

    ;; Optionally configure the narrowing key.
    ;; Both < and C-+ work reasonably well.
    (setq consult-narrow-key "<") ;; (kbd "C-+")

    ;; Optionally make narrowing help available in the minibuffer.
    ;; You may want to use `embark-prefix-help-command' or which-key instead.
    ;; (define-key consult-narrow-map (vconcat consult-narrow-key "?") #'consult-narrow-help)

    ;; By default `consult-project-function' uses `project-root' from project.el.
    ;; Optionally configure a different project root function.
    ;; There are multiple reasonable alternatives to chose from.
    ;;;; 1. project.el (the default)
    ;; (setq consult-project-function #'consult--default-project--function)
    ;;;; 2. projectile.el (projectile-project-root)
    ;; (autoload 'projectile-project-root "projectile")
    ;; (setq consult-project-function (lambda (_) (projectile-project-root)))
    ;;;; 3. vc.el (vc-root-dir)
    ;; (setq consult-project-function (lambda (_) (vc-root-dir)))
    ;;;; 4. locate-dominating-file
    ;; (setq consult-project-function (lambda (_) (locate-dominating-file "." ".git")))
    )
#+end_src

*** embark
#+begin_src elisp
  (use-package embark
    :ensure t

    :bind
    (("C-." . embark-act)         ;; pick some comfortable binding
     ("C-;" . embark-dwim)        ;; good alternative: M-.
     ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'

    :init

    ;; Optionally replace the key help with a completing-read interface
    (setq prefix-help-command #'embark-prefix-help-command)

    :config

    ;; Hide the mode line of the Embark live/completions buffers
    (add-to-list 'display-buffer-alist
                 '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                   nil
                   (window-parameters (mode-line-format . none)))))

  ;; Consult users will also want the embark-consult package.
  (use-package embark-consult
    :ensure t
    :after (embark consult)
    :demand t ; only necessary if you have the hook below
    ;; if you want to have consult previews as you move around an
    ;; auto-updating embark collect buffer
    :hook
    (embark-collect-mode . consult-preview-at-point-mode))
#+end_src

* Key-bindings

| [[https://github.com/emacs-evil/evil][evil]] |  The extensible vi layer for Emacs. |

** EVIL
#+begin_src elisp
  (use-package evil
    :ensure t)
#+end_src

* Key cheat sheet
** which-key
#+begin_src elisp
  (use-package which-key
    :ensure t
    :config (which-key-mode 1))
#+end_src

* Version Control

| [[https://github.com/magit/magit][Magit]] | It's Magit! A Git porcelain inside Emacs. |

** Magit
#+begin_src elisp
  (use-package magit
    :ensure t)
#+end_src

* LaTeX

| [[https://www.gnu.org/software/auctex/][AUCTeX]] | AUCTeX – Sophisticated document creation |

** AUCTeX
#+begin_src elisp
  (use-package auctex
    :ensure t
    :defer t
    :hook (LaTeX-mode . (lambda ()
                          (push (list 'output-pdf "Zathura")
                                TeX-view-program-selection))))
#+end_src
